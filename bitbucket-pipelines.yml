image: atlassian/default-image:3

pipelines:
  branches:
    main:
      - step:
          name: Snyk Open Source & Code scan
          image: node:20
          caches:
            - node
          script:
            - npm ci
            - npm install -g snyk@latest
            - snyk auth ${SNYK_TOKEN}
            - snyk test --severity-threshold=${SNYK_SEVERITY_THRESHOLD:-medium}
            - snyk code test --severity-threshold=${SNYK_SEVERITY_THRESHOLD:-medium}
      - step:
          name: Build Docker image (artifact)
          services:
            - docker
          caches:
            - docker
          script:
            - export REPOSITORY="testfest-repo"
            - export TAG_COMMIT=${BITBUCKET_COMMIT}
            - export IMAGE="${REPOSITORY}:${TAG_COMMIT}"
            - docker build -t ${IMAGE} .
            - docker save ${IMAGE} -o image.tar
          artifacts:
            - image.tar
      - step:
          name: Snyk Container scan
          services:
            - docker
          caches:
            - docker
          script:
            - docker load -i image.tar
            - apk add --no-cache curl || true
            - curl -sL https://static.snyk.io/cli/latest/snyk-alpine -o /usr/local/bin/snyk && chmod +x /usr/local/bin/snyk
            - export REPOSITORY="testfest-repo"
            - export TAG_COMMIT=${BITBUCKET_COMMIT}
            - export IMAGE="${REPOSITORY}:${TAG_COMMIT}"
            - snyk auth ${SNYK_TOKEN}
            - snyk container test ${IMAGE} --file=Dockerfile --severity-threshold=${SNYK_SEVERITY_THRESHOLD:-medium}
      - step:
          name: Push Docker image to AWS ECR
          services:
            - docker
          caches:
            - docker
          script:
            - pip3 install --user awscli
            - export PATH=$PATH:/root/.local/bin
            - export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
            - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
            - export REPOSITORY="testfest-repo"
            - export REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
            - docker load -i image.tar
            - export TAG_COMMIT=${BITBUCKET_COMMIT}
            - export IMAGE_LOCAL="${REPOSITORY}:${TAG_COMMIT}"
            - export IMAGE_REMOTE_COMMIT="${REGISTRY}/${REPOSITORY}:${TAG_COMMIT}"
            - export IMAGE_REMOTE_LATEST="${REGISTRY}/${REPOSITORY}:latest"
            - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
            - aws ecr describe-repositories --repository-names ${REPOSITORY} --region ${AWS_DEFAULT_REGION} >/dev/null 2>&1 || aws ecr create-repository --repository-name ${REPOSITORY} --region ${AWS_DEFAULT_REGION}
            - docker tag ${IMAGE_LOCAL} ${IMAGE_REMOTE_COMMIT}
            - docker tag ${IMAGE_LOCAL} ${IMAGE_REMOTE_LATEST}
            - docker push ${IMAGE_REMOTE_COMMIT}
            - docker push ${IMAGE_REMOTE_LATEST}

definitions:
  caches:
    node: ~/.npm
  services:
    docker:
      memory: 3072
