generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["testfest", "public"]
}

model User {
  id    String  @id @db.Uuid
  sub   String  @unique
  name  String?
  email String?

  rooms                  Room[]                   @relation("RoomCreatedBy")
  roomMembers            RoomMember[]
  issues                 Issue[]                  @relation("IssueCreatedBy")
  testScriptLineProgress TestScriptLineProgress[]

  @@map("users")
  @@schema("testfest")
}

model Room {
  id         String   @id @db.Uuid
  name       String
  created_by String?  @db.Uuid
  created_at DateTime @default(now())

  createdBy   User?        @relation("RoomCreatedBy", fields: [created_by], references: [id], onDelete: SetNull)
  members     RoomMember[]
  issues      Issue[]
  testScripts TestScript[]

  @@map("rooms")
  @@schema("testfest")
}

model RoomMember {
  room_id     String  @db.Uuid
  user_id     String  @db.Uuid
  is_groupier Boolean @default(false)

  room Room @relation(fields: [room_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([room_id, user_id])
  @@map("room_members")
  @@schema("testfest")
}

model Issue {
  id                      String   @id @db.Uuid
  room_id                 String   @db.Uuid
  created_by              String?  @db.Uuid
  script_id               Int?
  description             String?
  images                  Json?
  is_issue                Boolean  @default(false)
  is_annoyance            Boolean  @default(false)
  is_existing_upper_env   Boolean  @default(false)
  status                  String?  @default("open")
  jira_key                String?
  is_not_sure_how_to_test Boolean  @default(false)
  created_at              DateTime @default(now())

  room      Room  @relation(fields: [room_id], references: [id], onDelete: Cascade)
  createdBy User? @relation("IssueCreatedBy", fields: [created_by], references: [id], onDelete: SetNull)

  @@map("issues")
  @@schema("testfest")
}

model Session {
  sid    String   @id @db.VarChar(255)
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@map("session")
  @@schema("testfest")
}

model TestScript {
  id          String   @id @db.Uuid
  room_id     String   @db.Uuid
  script_id   Int
  name        String
  description String?
  created_at  DateTime @default(now())

  room  Room             @relation(fields: [room_id], references: [id], onDelete: Cascade)
  lines TestScriptLine[]

  @@unique([room_id, script_id])
  @@map("test_script")
  @@schema("testfest")
}

model TestScriptLine {
  id                  String   @id @db.Uuid
  test_script_id      String   @db.Uuid
  test_script_line_id Int
  name                String
  description         String?
  notes               String?
  created_at          DateTime @default(now())

  testScript TestScript               @relation(fields: [test_script_id], references: [id], onDelete: Cascade)
  progress   TestScriptLineProgress[]

  @@map("test_script_line")
  @@schema("testfest")
}

model TestScriptLineProgress {
  id                  String    @id @db.Uuid
  user_id             String    @db.Uuid
  test_script_line_id String    @db.Uuid
  is_checked          Boolean   @default(false)
  checked_at          DateTime?
  notes               String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  testScriptLine TestScriptLine @relation(fields: [test_script_line_id], references: [id], onDelete: Cascade)

  @@unique([user_id, test_script_line_id])
  @@map("test_script_line_progress")
  @@schema("testfest")
}
